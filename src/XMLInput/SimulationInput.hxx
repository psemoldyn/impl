// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIMULATION_INPUT_HXX
#define SIMULATION_INPUT_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class globalVals;
class cuboidInput;
class sphereInput;
class listInput;
class linkedCellInput;
class tempInput;
class outputData;
class particleInput;
class simulationInput;

#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class globalVals: public ::xml_schema::type
{
  public:
  // endTime
  //
  typedef ::xml_schema::decimal endTime_type;
  typedef ::xsd::cxx::tree::optional< endTime_type > endTime_optional;
  typedef ::xsd::cxx::tree::traits< endTime_type, char, ::xsd::cxx::tree::schema_type::decimal > endTime_traits;

  const endTime_optional&
  endTime () const;

  endTime_optional&
  endTime ();

  void
  endTime (const endTime_type& x);

  void
  endTime (const endTime_optional& x);

  // deltaT
  //
  typedef ::xml_schema::decimal deltaT_type;
  typedef ::xsd::cxx::tree::optional< deltaT_type > deltaT_optional;
  typedef ::xsd::cxx::tree::traits< deltaT_type, char, ::xsd::cxx::tree::schema_type::decimal > deltaT_traits;

  const deltaT_optional&
  deltaT () const;

  deltaT_optional&
  deltaT ();

  void
  deltaT (const deltaT_type& x);

  void
  deltaT (const deltaT_optional& x);

  // simType
  //
  typedef ::xml_schema::integer simType_type;
  typedef ::xsd::cxx::tree::optional< simType_type > simType_optional;
  typedef ::xsd::cxx::tree::traits< simType_type, char > simType_traits;

  const simType_optional&
  simType () const;

  simType_optional&
  simType ();

  void
  simType (const simType_type& x);

  void
  simType (const simType_optional& x);

  // applyTemp
  //
  typedef ::xml_schema::boolean applyTemp_type;
  typedef ::xsd::cxx::tree::optional< applyTemp_type > applyTemp_optional;
  typedef ::xsd::cxx::tree::traits< applyTemp_type, char > applyTemp_traits;

  const applyTemp_optional&
  applyTemp () const;

  applyTemp_optional&
  applyTemp ();

  void
  applyTemp (const applyTemp_type& x);

  void
  applyTemp (const applyTemp_optional& x);

  // gravity
  //
  typedef ::xml_schema::decimal gravity_type;
  typedef ::xsd::cxx::tree::optional< gravity_type > gravity_optional;
  typedef ::xsd::cxx::tree::traits< gravity_type, char, ::xsd::cxx::tree::schema_type::decimal > gravity_traits;

  const gravity_optional&
  gravity () const;

  gravity_optional&
  gravity ();

  void
  gravity (const gravity_type& x);

  void
  gravity (const gravity_optional& x);

  // boundaryType
  //
  typedef ::xml_schema::integer boundaryType_type;
  typedef ::xsd::cxx::tree::optional< boundaryType_type > boundaryType_optional;
  typedef ::xsd::cxx::tree::traits< boundaryType_type, char > boundaryType_traits;

  const boundaryType_optional&
  boundaryType () const;

  boundaryType_optional&
  boundaryType ();

  void
  boundaryType (const boundaryType_type& x);

  void
  boundaryType (const boundaryType_optional& x);

  // use3d
  //
  typedef ::xml_schema::boolean use3d_type;
  typedef ::xsd::cxx::tree::optional< use3d_type > use3d_optional;
  typedef ::xsd::cxx::tree::traits< use3d_type, char > use3d_traits;

  const use3d_optional&
  use3d () const;

  use3d_optional&
  use3d ();

  void
  use3d (const use3d_type& x);

  void
  use3d (const use3d_optional& x);

  // Constructors.
  //
  globalVals ();

  globalVals (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  globalVals (const globalVals& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual globalVals*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  globalVals&
  operator= (const globalVals& x);

  virtual 
  ~globalVals ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  endTime_optional endTime_;
  deltaT_optional deltaT_;
  simType_optional simType_;
  applyTemp_optional applyTemp_;
  gravity_optional gravity_;
  boundaryType_optional boundaryType_;
  use3d_optional use3d_;
};

class cuboidInput: public ::xml_schema::type
{
  public:
  // firstPosX
  //
  typedef ::xml_schema::decimal firstPosX_type;
  typedef ::xsd::cxx::tree::optional< firstPosX_type > firstPosX_optional;
  typedef ::xsd::cxx::tree::traits< firstPosX_type, char, ::xsd::cxx::tree::schema_type::decimal > firstPosX_traits;

  const firstPosX_optional&
  firstPosX () const;

  firstPosX_optional&
  firstPosX ();

  void
  firstPosX (const firstPosX_type& x);

  void
  firstPosX (const firstPosX_optional& x);

  // firstPosY
  //
  typedef ::xml_schema::decimal firstPosY_type;
  typedef ::xsd::cxx::tree::optional< firstPosY_type > firstPosY_optional;
  typedef ::xsd::cxx::tree::traits< firstPosY_type, char, ::xsd::cxx::tree::schema_type::decimal > firstPosY_traits;

  const firstPosY_optional&
  firstPosY () const;

  firstPosY_optional&
  firstPosY ();

  void
  firstPosY (const firstPosY_type& x);

  void
  firstPosY (const firstPosY_optional& x);

  // firstPosZ
  //
  typedef ::xml_schema::decimal firstPosZ_type;
  typedef ::xsd::cxx::tree::optional< firstPosZ_type > firstPosZ_optional;
  typedef ::xsd::cxx::tree::traits< firstPosZ_type, char, ::xsd::cxx::tree::schema_type::decimal > firstPosZ_traits;

  const firstPosZ_optional&
  firstPosZ () const;

  firstPosZ_optional&
  firstPosZ ();

  void
  firstPosZ (const firstPosZ_type& x);

  void
  firstPosZ (const firstPosZ_optional& x);

  // startVelX
  //
  typedef ::xml_schema::decimal startVelX_type;
  typedef ::xsd::cxx::tree::optional< startVelX_type > startVelX_optional;
  typedef ::xsd::cxx::tree::traits< startVelX_type, char, ::xsd::cxx::tree::schema_type::decimal > startVelX_traits;

  const startVelX_optional&
  startVelX () const;

  startVelX_optional&
  startVelX ();

  void
  startVelX (const startVelX_type& x);

  void
  startVelX (const startVelX_optional& x);

  // startVelY
  //
  typedef ::xml_schema::decimal startVelY_type;
  typedef ::xsd::cxx::tree::optional< startVelY_type > startVelY_optional;
  typedef ::xsd::cxx::tree::traits< startVelY_type, char, ::xsd::cxx::tree::schema_type::decimal > startVelY_traits;

  const startVelY_optional&
  startVelY () const;

  startVelY_optional&
  startVelY ();

  void
  startVelY (const startVelY_type& x);

  void
  startVelY (const startVelY_optional& x);

  // startVelZ
  //
  typedef ::xml_schema::decimal startVelZ_type;
  typedef ::xsd::cxx::tree::optional< startVelZ_type > startVelZ_optional;
  typedef ::xsd::cxx::tree::traits< startVelZ_type, char, ::xsd::cxx::tree::schema_type::decimal > startVelZ_traits;

  const startVelZ_optional&
  startVelZ () const;

  startVelZ_optional&
  startVelZ ();

  void
  startVelZ (const startVelZ_type& x);

  void
  startVelZ (const startVelZ_optional& x);

  // lengthX
  //
  typedef ::xml_schema::integer lengthX_type;
  typedef ::xsd::cxx::tree::optional< lengthX_type > lengthX_optional;
  typedef ::xsd::cxx::tree::traits< lengthX_type, char > lengthX_traits;

  const lengthX_optional&
  lengthX () const;

  lengthX_optional&
  lengthX ();

  void
  lengthX (const lengthX_type& x);

  void
  lengthX (const lengthX_optional& x);

  // lengthY
  //
  typedef ::xml_schema::integer lengthY_type;
  typedef ::xsd::cxx::tree::optional< lengthY_type > lengthY_optional;
  typedef ::xsd::cxx::tree::traits< lengthY_type, char > lengthY_traits;

  const lengthY_optional&
  lengthY () const;

  lengthY_optional&
  lengthY ();

  void
  lengthY (const lengthY_type& x);

  void
  lengthY (const lengthY_optional& x);

  // lengthZ
  //
  typedef ::xml_schema::integer lengthZ_type;
  typedef ::xsd::cxx::tree::optional< lengthZ_type > lengthZ_optional;
  typedef ::xsd::cxx::tree::traits< lengthZ_type, char > lengthZ_traits;

  const lengthZ_optional&
  lengthZ () const;

  lengthZ_optional&
  lengthZ ();

  void
  lengthZ (const lengthZ_type& x);

  void
  lengthZ (const lengthZ_optional& x);

  // mass
  //
  typedef ::xml_schema::decimal mass_type;
  typedef ::xsd::cxx::tree::optional< mass_type > mass_optional;
  typedef ::xsd::cxx::tree::traits< mass_type, char, ::xsd::cxx::tree::schema_type::decimal > mass_traits;

  const mass_optional&
  mass () const;

  mass_optional&
  mass ();

  void
  mass (const mass_type& x);

  void
  mass (const mass_optional& x);

  // dist
  //
  typedef ::xml_schema::decimal dist_type;
  typedef ::xsd::cxx::tree::optional< dist_type > dist_optional;
  typedef ::xsd::cxx::tree::traits< dist_type, char, ::xsd::cxx::tree::schema_type::decimal > dist_traits;

  const dist_optional&
  dist () const;

  dist_optional&
  dist ();

  void
  dist (const dist_type& x);

  void
  dist (const dist_optional& x);

  // sigma
  //
  typedef ::xml_schema::decimal sigma_type;
  typedef ::xsd::cxx::tree::optional< sigma_type > sigma_optional;
  typedef ::xsd::cxx::tree::traits< sigma_type, char, ::xsd::cxx::tree::schema_type::decimal > sigma_traits;

  const sigma_optional&
  sigma () const;

  sigma_optional&
  sigma ();

  void
  sigma (const sigma_type& x);

  void
  sigma (const sigma_optional& x);

  // epsilon
  //
  typedef ::xml_schema::decimal epsilon_type;
  typedef ::xsd::cxx::tree::optional< epsilon_type > epsilon_optional;
  typedef ::xsd::cxx::tree::traits< epsilon_type, char, ::xsd::cxx::tree::schema_type::decimal > epsilon_traits;

  const epsilon_optional&
  epsilon () const;

  epsilon_optional&
  epsilon ();

  void
  epsilon (const epsilon_type& x);

  void
  epsilon (const epsilon_optional& x);

  // Constructors.
  //
  cuboidInput ();

  cuboidInput (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  cuboidInput (const cuboidInput& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual cuboidInput*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  cuboidInput&
  operator= (const cuboidInput& x);

  virtual 
  ~cuboidInput ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  firstPosX_optional firstPosX_;
  firstPosY_optional firstPosY_;
  firstPosZ_optional firstPosZ_;
  startVelX_optional startVelX_;
  startVelY_optional startVelY_;
  startVelZ_optional startVelZ_;
  lengthX_optional lengthX_;
  lengthY_optional lengthY_;
  lengthZ_optional lengthZ_;
  mass_optional mass_;
  dist_optional dist_;
  sigma_optional sigma_;
  epsilon_optional epsilon_;
};

class sphereInput: public ::xml_schema::type
{
  public:
  // centerX
  //
  typedef ::xml_schema::decimal centerX_type;
  typedef ::xsd::cxx::tree::optional< centerX_type > centerX_optional;
  typedef ::xsd::cxx::tree::traits< centerX_type, char, ::xsd::cxx::tree::schema_type::decimal > centerX_traits;

  const centerX_optional&
  centerX () const;

  centerX_optional&
  centerX ();

  void
  centerX (const centerX_type& x);

  void
  centerX (const centerX_optional& x);

  // centerY
  //
  typedef ::xml_schema::decimal centerY_type;
  typedef ::xsd::cxx::tree::optional< centerY_type > centerY_optional;
  typedef ::xsd::cxx::tree::traits< centerY_type, char, ::xsd::cxx::tree::schema_type::decimal > centerY_traits;

  const centerY_optional&
  centerY () const;

  centerY_optional&
  centerY ();

  void
  centerY (const centerY_type& x);

  void
  centerY (const centerY_optional& x);

  // centerZ
  //
  typedef ::xml_schema::decimal centerZ_type;
  typedef ::xsd::cxx::tree::optional< centerZ_type > centerZ_optional;
  typedef ::xsd::cxx::tree::traits< centerZ_type, char, ::xsd::cxx::tree::schema_type::decimal > centerZ_traits;

  const centerZ_optional&
  centerZ () const;

  centerZ_optional&
  centerZ ();

  void
  centerZ (const centerZ_type& x);

  void
  centerZ (const centerZ_optional& x);

  // startVelX
  //
  typedef ::xml_schema::decimal startVelX_type;
  typedef ::xsd::cxx::tree::optional< startVelX_type > startVelX_optional;
  typedef ::xsd::cxx::tree::traits< startVelX_type, char, ::xsd::cxx::tree::schema_type::decimal > startVelX_traits;

  const startVelX_optional&
  startVelX () const;

  startVelX_optional&
  startVelX ();

  void
  startVelX (const startVelX_type& x);

  void
  startVelX (const startVelX_optional& x);

  // startVelY
  //
  typedef ::xml_schema::decimal startVelY_type;
  typedef ::xsd::cxx::tree::optional< startVelY_type > startVelY_optional;
  typedef ::xsd::cxx::tree::traits< startVelY_type, char, ::xsd::cxx::tree::schema_type::decimal > startVelY_traits;

  const startVelY_optional&
  startVelY () const;

  startVelY_optional&
  startVelY ();

  void
  startVelY (const startVelY_type& x);

  void
  startVelY (const startVelY_optional& x);

  // startVelZ
  //
  typedef ::xml_schema::decimal startVelZ_type;
  typedef ::xsd::cxx::tree::optional< startVelZ_type > startVelZ_optional;
  typedef ::xsd::cxx::tree::traits< startVelZ_type, char, ::xsd::cxx::tree::schema_type::decimal > startVelZ_traits;

  const startVelZ_optional&
  startVelZ () const;

  startVelZ_optional&
  startVelZ ();

  void
  startVelZ (const startVelZ_type& x);

  void
  startVelZ (const startVelZ_optional& x);

  // radius
  //
  typedef ::xml_schema::integer radius_type;
  typedef ::xsd::cxx::tree::optional< radius_type > radius_optional;
  typedef ::xsd::cxx::tree::traits< radius_type, char > radius_traits;

  const radius_optional&
  radius () const;

  radius_optional&
  radius ();

  void
  radius (const radius_type& x);

  void
  radius (const radius_optional& x);

  // mass
  //
  typedef ::xml_schema::decimal mass_type;
  typedef ::xsd::cxx::tree::optional< mass_type > mass_optional;
  typedef ::xsd::cxx::tree::traits< mass_type, char, ::xsd::cxx::tree::schema_type::decimal > mass_traits;

  const mass_optional&
  mass () const;

  mass_optional&
  mass ();

  void
  mass (const mass_type& x);

  void
  mass (const mass_optional& x);

  // dist
  //
  typedef ::xml_schema::decimal dist_type;
  typedef ::xsd::cxx::tree::optional< dist_type > dist_optional;
  typedef ::xsd::cxx::tree::traits< dist_type, char, ::xsd::cxx::tree::schema_type::decimal > dist_traits;

  const dist_optional&
  dist () const;

  dist_optional&
  dist ();

  void
  dist (const dist_type& x);

  void
  dist (const dist_optional& x);

  // sigma
  //
  typedef ::xml_schema::decimal sigma_type;
  typedef ::xsd::cxx::tree::optional< sigma_type > sigma_optional;
  typedef ::xsd::cxx::tree::traits< sigma_type, char, ::xsd::cxx::tree::schema_type::decimal > sigma_traits;

  const sigma_optional&
  sigma () const;

  sigma_optional&
  sigma ();

  void
  sigma (const sigma_type& x);

  void
  sigma (const sigma_optional& x);

  // epsilon
  //
  typedef ::xml_schema::decimal epsilon_type;
  typedef ::xsd::cxx::tree::optional< epsilon_type > epsilon_optional;
  typedef ::xsd::cxx::tree::traits< epsilon_type, char, ::xsd::cxx::tree::schema_type::decimal > epsilon_traits;

  const epsilon_optional&
  epsilon () const;

  epsilon_optional&
  epsilon ();

  void
  epsilon (const epsilon_type& x);

  void
  epsilon (const epsilon_optional& x);

  // Constructors.
  //
  sphereInput ();

  sphereInput (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  sphereInput (const sphereInput& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual sphereInput*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  sphereInput&
  operator= (const sphereInput& x);

  virtual 
  ~sphereInput ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  centerX_optional centerX_;
  centerY_optional centerY_;
  centerZ_optional centerZ_;
  startVelX_optional startVelX_;
  startVelY_optional startVelY_;
  startVelZ_optional startVelZ_;
  radius_optional radius_;
  mass_optional mass_;
  dist_optional dist_;
  sigma_optional sigma_;
  epsilon_optional epsilon_;
};

class listInput: public ::xml_schema::type
{
  public:
  // listParticleInput
  //
  typedef ::xml_schema::string listParticleInput_type;
  typedef ::xsd::cxx::tree::optional< listParticleInput_type > listParticleInput_optional;
  typedef ::xsd::cxx::tree::traits< listParticleInput_type, char > listParticleInput_traits;

  const listParticleInput_optional&
  listParticleInput () const;

  listParticleInput_optional&
  listParticleInput ();

  void
  listParticleInput (const listParticleInput_type& x);

  void
  listParticleInput (const listParticleInput_optional& x);

  void
  listParticleInput (::std::auto_ptr< listParticleInput_type > p);

  // Constructors.
  //
  listInput ();

  listInput (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  listInput (const listInput& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual listInput*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  listInput&
  operator= (const listInput& x);

  virtual 
  ~listInput ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  listParticleInput_optional listParticleInput_;
};

class linkedCellInput: public ::xml_schema::type
{
  public:
  // domainSizeX
  //
  typedef ::xml_schema::decimal domainSizeX_type;
  typedef ::xsd::cxx::tree::optional< domainSizeX_type > domainSizeX_optional;
  typedef ::xsd::cxx::tree::traits< domainSizeX_type, char, ::xsd::cxx::tree::schema_type::decimal > domainSizeX_traits;

  const domainSizeX_optional&
  domainSizeX () const;

  domainSizeX_optional&
  domainSizeX ();

  void
  domainSizeX (const domainSizeX_type& x);

  void
  domainSizeX (const domainSizeX_optional& x);

  // domainSizeY
  //
  typedef ::xml_schema::decimal domainSizeY_type;
  typedef ::xsd::cxx::tree::optional< domainSizeY_type > domainSizeY_optional;
  typedef ::xsd::cxx::tree::traits< domainSizeY_type, char, ::xsd::cxx::tree::schema_type::decimal > domainSizeY_traits;

  const domainSizeY_optional&
  domainSizeY () const;

  domainSizeY_optional&
  domainSizeY ();

  void
  domainSizeY (const domainSizeY_type& x);

  void
  domainSizeY (const domainSizeY_optional& x);

  // domainSizeZ
  //
  typedef ::xml_schema::decimal domainSizeZ_type;
  typedef ::xsd::cxx::tree::optional< domainSizeZ_type > domainSizeZ_optional;
  typedef ::xsd::cxx::tree::traits< domainSizeZ_type, char, ::xsd::cxx::tree::schema_type::decimal > domainSizeZ_traits;

  const domainSizeZ_optional&
  domainSizeZ () const;

  domainSizeZ_optional&
  domainSizeZ ();

  void
  domainSizeZ (const domainSizeZ_type& x);

  void
  domainSizeZ (const domainSizeZ_optional& x);

  // rcut
  //
  typedef ::xml_schema::decimal rcut_type;
  typedef ::xsd::cxx::tree::optional< rcut_type > rcut_optional;
  typedef ::xsd::cxx::tree::traits< rcut_type, char, ::xsd::cxx::tree::schema_type::decimal > rcut_traits;

  const rcut_optional&
  rcut () const;

  rcut_optional&
  rcut ();

  void
  rcut (const rcut_type& x);

  void
  rcut (const rcut_optional& x);

  // Constructors.
  //
  linkedCellInput ();

  linkedCellInput (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  linkedCellInput (const linkedCellInput& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual linkedCellInput*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  linkedCellInput&
  operator= (const linkedCellInput& x);

  virtual 
  ~linkedCellInput ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  domainSizeX_optional domainSizeX_;
  domainSizeY_optional domainSizeY_;
  domainSizeZ_optional domainSizeZ_;
  rcut_optional rcut_;
};

class tempInput: public ::xml_schema::type
{
  public:
  // initTemp
  //
  typedef ::xml_schema::decimal initTemp_type;
  typedef ::xsd::cxx::tree::optional< initTemp_type > initTemp_optional;
  typedef ::xsd::cxx::tree::traits< initTemp_type, char, ::xsd::cxx::tree::schema_type::decimal > initTemp_traits;

  const initTemp_optional&
  initTemp () const;

  initTemp_optional&
  initTemp ();

  void
  initTemp (const initTemp_type& x);

  void
  initTemp (const initTemp_optional& x);

  // stepsApply
  //
  typedef ::xml_schema::integer stepsApply_type;
  typedef ::xsd::cxx::tree::optional< stepsApply_type > stepsApply_optional;
  typedef ::xsd::cxx::tree::traits< stepsApply_type, char > stepsApply_traits;

  const stepsApply_optional&
  stepsApply () const;

  stepsApply_optional&
  stepsApply ();

  void
  stepsApply (const stepsApply_type& x);

  void
  stepsApply (const stepsApply_optional& x);

  // brown
  //
  typedef ::xml_schema::boolean brown_type;
  typedef ::xsd::cxx::tree::optional< brown_type > brown_optional;
  typedef ::xsd::cxx::tree::traits< brown_type, char > brown_traits;

  const brown_optional&
  brown () const;

  brown_optional&
  brown ();

  void
  brown (const brown_type& x);

  void
  brown (const brown_optional& x);

  // deltaTemp
  //
  typedef ::xml_schema::decimal deltaTemp_type;
  typedef ::xsd::cxx::tree::optional< deltaTemp_type > deltaTemp_optional;
  typedef ::xsd::cxx::tree::traits< deltaTemp_type, char, ::xsd::cxx::tree::schema_type::decimal > deltaTemp_traits;

  const deltaTemp_optional&
  deltaTemp () const;

  deltaTemp_optional&
  deltaTemp ();

  void
  deltaTemp (const deltaTemp_type& x);

  void
  deltaTemp (const deltaTemp_optional& x);

  // deltaTempSteps
  //
  typedef ::xml_schema::integer deltaTempSteps_type;
  typedef ::xsd::cxx::tree::optional< deltaTempSteps_type > deltaTempSteps_optional;
  typedef ::xsd::cxx::tree::traits< deltaTempSteps_type, char > deltaTempSteps_traits;

  const deltaTempSteps_optional&
  deltaTempSteps () const;

  deltaTempSteps_optional&
  deltaTempSteps ();

  void
  deltaTempSteps (const deltaTempSteps_type& x);

  void
  deltaTempSteps (const deltaTempSteps_optional& x);

  // targetTemp
  //
  typedef ::xml_schema::decimal targetTemp_type;
  typedef ::xsd::cxx::tree::optional< targetTemp_type > targetTemp_optional;
  typedef ::xsd::cxx::tree::traits< targetTemp_type, char, ::xsd::cxx::tree::schema_type::decimal > targetTemp_traits;

  const targetTemp_optional&
  targetTemp () const;

  targetTemp_optional&
  targetTemp ();

  void
  targetTemp (const targetTemp_type& x);

  void
  targetTemp (const targetTemp_optional& x);

  // Constructors.
  //
  tempInput ();

  tempInput (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  tempInput (const tempInput& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual tempInput*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  tempInput&
  operator= (const tempInput& x);

  virtual 
  ~tempInput ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  initTemp_optional initTemp_;
  stepsApply_optional stepsApply_;
  brown_optional brown_;
  deltaTemp_optional deltaTemp_;
  deltaTempSteps_optional deltaTempSteps_;
  targetTemp_optional targetTemp_;
};

class outputData: public ::xml_schema::type
{
  public:
  // filename
  //
  typedef ::xml_schema::string filename_type;
  typedef ::xsd::cxx::tree::optional< filename_type > filename_optional;
  typedef ::xsd::cxx::tree::traits< filename_type, char > filename_traits;

  const filename_optional&
  filename () const;

  filename_optional&
  filename ();

  void
  filename (const filename_type& x);

  void
  filename (const filename_optional& x);

  void
  filename (::std::auto_ptr< filename_type > p);

  // writeFreq
  //
  typedef ::xml_schema::integer writeFreq_type;
  typedef ::xsd::cxx::tree::optional< writeFreq_type > writeFreq_optional;
  typedef ::xsd::cxx::tree::traits< writeFreq_type, char > writeFreq_traits;

  const writeFreq_optional&
  writeFreq () const;

  writeFreq_optional&
  writeFreq ();

  void
  writeFreq (const writeFreq_type& x);

  void
  writeFreq (const writeFreq_optional& x);

  // writeType
  //
  typedef ::xml_schema::integer writeType_type;
  typedef ::xsd::cxx::tree::optional< writeType_type > writeType_optional;
  typedef ::xsd::cxx::tree::traits< writeType_type, char > writeType_traits;

  const writeType_optional&
  writeType () const;

  writeType_optional&
  writeType ();

  void
  writeType (const writeType_type& x);

  void
  writeType (const writeType_optional& x);

  // Constructors.
  //
  outputData ();

  outputData (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  outputData (const outputData& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual outputData*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  outputData&
  operator= (const outputData& x);

  virtual 
  ~outputData ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  filename_optional filename_;
  writeFreq_optional writeFreq_;
  writeType_optional writeType_;
};

class particleInput: public ::xml_schema::type
{
  public:
  // cuboid
  //
  typedef ::cuboidInput cuboid_type;
  typedef ::xsd::cxx::tree::sequence< cuboid_type > cuboid_sequence;
  typedef cuboid_sequence::iterator cuboid_iterator;
  typedef cuboid_sequence::const_iterator cuboid_const_iterator;
  typedef ::xsd::cxx::tree::traits< cuboid_type, char > cuboid_traits;

  const cuboid_sequence&
  cuboid () const;

  cuboid_sequence&
  cuboid ();

  void
  cuboid (const cuboid_sequence& s);

  // sphere
  //
  typedef ::sphereInput sphere_type;
  typedef ::xsd::cxx::tree::sequence< sphere_type > sphere_sequence;
  typedef sphere_sequence::iterator sphere_iterator;
  typedef sphere_sequence::const_iterator sphere_const_iterator;
  typedef ::xsd::cxx::tree::traits< sphere_type, char > sphere_traits;

  const sphere_sequence&
  sphere () const;

  sphere_sequence&
  sphere ();

  void
  sphere (const sphere_sequence& s);

  // list
  //
  typedef ::listInput list_type;
  typedef ::xsd::cxx::tree::sequence< list_type > list_sequence;
  typedef list_sequence::iterator list_iterator;
  typedef list_sequence::const_iterator list_const_iterator;
  typedef ::xsd::cxx::tree::traits< list_type, char > list_traits;

  const list_sequence&
  list () const;

  list_sequence&
  list ();

  void
  list (const list_sequence& s);

  // Constructors.
  //
  particleInput ();

  particleInput (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  particleInput (const particleInput& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual particleInput*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  particleInput&
  operator= (const particleInput& x);

  virtual 
  ~particleInput ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  cuboid_sequence cuboid_;
  sphere_sequence sphere_;
  list_sequence list_;
};

class simulationInput: public ::xml_schema::type
{
  public:
  // global
  //
  typedef ::globalVals global_type;
  typedef ::xsd::cxx::tree::traits< global_type, char > global_traits;

  const global_type&
  global () const;

  global_type&
  global ();

  void
  global (const global_type& x);

  void
  global (::std::auto_ptr< global_type > p);

  // particles
  //
  typedef ::particleInput particles_type;
  typedef ::xsd::cxx::tree::traits< particles_type, char > particles_traits;

  const particles_type&
  particles () const;

  particles_type&
  particles ();

  void
  particles (const particles_type& x);

  void
  particles (::std::auto_ptr< particles_type > p);

  // linkedCell
  //
  typedef ::linkedCellInput linkedCell_type;
  typedef ::xsd::cxx::tree::traits< linkedCell_type, char > linkedCell_traits;

  const linkedCell_type&
  linkedCell () const;

  linkedCell_type&
  linkedCell ();

  void
  linkedCell (const linkedCell_type& x);

  void
  linkedCell (::std::auto_ptr< linkedCell_type > p);

  // temp
  //
  typedef ::tempInput temp_type;
  typedef ::xsd::cxx::tree::traits< temp_type, char > temp_traits;

  const temp_type&
  temp () const;

  temp_type&
  temp ();

  void
  temp (const temp_type& x);

  void
  temp (::std::auto_ptr< temp_type > p);

  // outData
  //
  typedef ::outputData outData_type;
  typedef ::xsd::cxx::tree::traits< outData_type, char > outData_traits;

  const outData_type&
  outData () const;

  outData_type&
  outData ();

  void
  outData (const outData_type& x);

  void
  outData (::std::auto_ptr< outData_type > p);

  // Constructors.
  //
  simulationInput (const global_type&,
                   const particles_type&,
                   const linkedCell_type&,
                   const temp_type&,
                   const outData_type&);

  simulationInput (::std::auto_ptr< global_type >,
                   ::std::auto_ptr< particles_type >,
                   ::std::auto_ptr< linkedCell_type >,
                   ::std::auto_ptr< temp_type >,
                   ::std::auto_ptr< outData_type >);

  simulationInput (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  simulationInput (const simulationInput& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual simulationInput*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  simulationInput&
  operator= (const simulationInput& x);

  virtual 
  ~simulationInput ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< global_type > global_;
  ::xsd::cxx::tree::one< particles_type > particles_;
  ::xsd::cxx::tree::one< linkedCell_type > linkedCell_;
  ::xsd::cxx::tree::one< temp_type > temp_;
  ::xsd::cxx::tree::one< outData_type > outData_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::simulationInput >
sim (const ::std::string& uri,
     ::xml_schema::flags f = 0,
     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulationInput >
sim (const ::std::string& uri,
     ::xml_schema::error_handler& eh,
     ::xml_schema::flags f = 0,
     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulationInput >
sim (const ::std::string& uri,
     ::xercesc::DOMErrorHandler& eh,
     ::xml_schema::flags f = 0,
     const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::simulationInput >
sim (::std::istream& is,
     ::xml_schema::flags f = 0,
     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulationInput >
sim (::std::istream& is,
     ::xml_schema::error_handler& eh,
     ::xml_schema::flags f = 0,
     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulationInput >
sim (::std::istream& is,
     ::xercesc::DOMErrorHandler& eh,
     ::xml_schema::flags f = 0,
     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulationInput >
sim (::std::istream& is,
     const ::std::string& id,
     ::xml_schema::flags f = 0,
     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulationInput >
sim (::std::istream& is,
     const ::std::string& id,
     ::xml_schema::error_handler& eh,
     ::xml_schema::flags f = 0,
     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulationInput >
sim (::std::istream& is,
     const ::std::string& id,
     ::xercesc::DOMErrorHandler& eh,
     ::xml_schema::flags f = 0,
     const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::simulationInput >
sim (::xercesc::InputSource& is,
     ::xml_schema::flags f = 0,
     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulationInput >
sim (::xercesc::InputSource& is,
     ::xml_schema::error_handler& eh,
     ::xml_schema::flags f = 0,
     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulationInput >
sim (::xercesc::InputSource& is,
     ::xercesc::DOMErrorHandler& eh,
     ::xml_schema::flags f = 0,
     const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::simulationInput >
sim (const ::xercesc::DOMDocument& d,
     ::xml_schema::flags f = 0,
     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::simulationInput >
sim (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
     ::xml_schema::flags f = 0,
     const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIMULATION_INPUT_HXX
